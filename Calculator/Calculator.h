//
//  Calculator.h
//  Calculator
//
//  Created by   颜风 on 14-5-25.
//  Copyright (c) 2014年 Shadow. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface Calculator : NSObject

#pragma mark - 类方法
/**
 *  计算
 *  
 *  支持:+ - * /  × ÷  小数 和括号的运算.需要传入一个中缀表达式,即通常所见的数学表达式形式.
 *
 *  @param expr 一个字符串,存储有需要计算的数学表达式.
 *
 *  @return 计算结果.如果数学表达式非法,会抛出NSException异常.
 */
+ (CGFloat) calculate: (NSString *) expr;

/**
 *  中缀表达式转后缀表达式.
 *
 *  算法:
 *  将一个普通的中序表达式转换为逆波兰表达式的一般算法是：
 *  首先需要分配2个栈，一个作为临时存储运算符的栈S1（含一个结束符号），一个
 *  作为输入逆波兰式的栈S2（空栈），S1栈可先放入优先级最低的运算符#，注意，
 *  中缀式应以此最低优先级的运算符结束。可指定其他字符，不一定非#不可。从中
 *  缀式的左端开始取字符，逐序进行如下步骤：
 *  （1）若取出的字符是操作数，则分析出完整的运算数，该操作数直接送入S2栈
 *  （2）若取出的字符是运算符，则将该运算符与S1栈栈顶元素比较，如果该运算符
 *      优先级大于S1栈栈顶运算符优先级，则将该运算符进S1栈，否则，将S1栈的栈
 *      顶运算符弹出，送入S2栈中，直至S1栈栈顶运算符低于（不包括等于）该运算
 *      符优先级，则将该运算符送入S1栈。
 *  （3）若取出的字符是“（”，则直接送入S1栈栈顶。
 *  （4）若取出的字符是“）”，则将距离S1栈栈顶最近的“（”之间的运算符，逐个出
 *      栈，依次送入S2栈，此时抛弃“（”。
 *  （5）重复上面的1~4步，直至处理完所有的输入字符
 *  （6）若取出的字符是“#”，则将S1栈内所有运算符（不包括“#”），逐个出栈，依
 *      次送入S2栈。
 *      完成以上步骤，S2栈便为逆波兰式输出结果。不过S2应做一下逆序处理,然后便
 *      可以按照逆波兰式的计算方法计算了！
 *
 *  @param expr 一个字符串,里面存储的是一个中缀表达式.
 *
 *  @return 对应的后缀表达式.
 */
+ (NSString *) trans: (NSString *) expr;

/**
 *  计算后缀表达式的结果.
 *
 *  算法:
 *      如果当前字符为变量或者为数字，则压栈，如果是运算符，则将栈顶两个元素
 *      弹出作相应运算，结果再入栈，最后当表达式扫描完后，栈里的就是结果。
 *
 *  @param rpn 一个后缀表达式
 *
 *  @return 计算结果.如果数学表达式非法,会抛出NSException异常.
 */
+ (CGFloat) calculateWithRpn:(NSString *) rpn;

/**
 *  清除表达式中的空白字符,便于转换.
 *
 *  @param expr 一个含有数学表达式的字符串.
 *
 *  @return 清除不必要白后的字符串.如果表达式中含有非法字符,则直接返回nil.
 */
+ (NSString *) cleanExpr: (NSString *)expr;
@end
